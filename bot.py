import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8487564738:AAEwVt2D_qzko-0XhbxAtuvp1yLX8aygNRI')
CREATOR_ID = 8097784914
PAYMENT_BOT_URL = os.environ.get('PAYMENT_BOT_URL', 'http://t.me/send?start=IVwpcz1iEoxg')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
REGISTER_USERNAME, REGISTER_PASSWORD, REGISTER_NICKNAME, REGISTER_WALLET = range(4)
TRANSFER_USER, TRANSFER_AMOUNT = range(4, 6)
PAYMENT_CONFIRMATION = 6

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return ReplyKeyboardMarkup([
        ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üí¨ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç'],
        ['üí∞ –ü–µ—Ä–µ–¥–∞—Ç—å USD', '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É'],
        ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å']
    ], resize_keyboard=True)

def admin_keyboard():
    return ReplyKeyboardMarkup([
        ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üí¨ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç'],
        ['üí∞ –ü–µ—Ä–µ–¥–∞—Ç—å USD', '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É'],
        ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å']
    ], resize_keyboard=True)

def payment_amount_keyboard():
    return ReplyKeyboardMarkup([
        ['5 USD', '10 USD', '20 USD'],
        ['50 USD', '100 USD', 'üîô –ù–∞–∑–∞–¥']
    ], resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
async def create_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, amount, payment_type, details):
    payment_id = db.add_pending_payment(user_id, amount, payment_type, details)
    
    if payment_id:
        payment_url = f"{PAYMENT_BOT_URL}_{payment_id}_{amount}"
        
        payment_text = (
            f"üí≥ –û–ø–ª–∞—Ç–∞ {amount} USD\n\n"
            f"üìã –¢–∏–ø: {payment_type}\n"
            f"üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment_url}\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        
        await update.message.reply_text(payment_text)
        return True
    return False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        payment_data = context.args[0].split('_')
        if len(payment_data) >= 3:
            payment_id = int(payment_data[1])
            amount = float(payment_data[2])
            
            payment = db.get_pending_payment(payment_id)
            if payment and not payment[6]:
                db.update_balance(payment[1], amount)
                db.complete_payment(payment_id)
                
                user = db.get_user(payment[1])
                if user:
                    await update.message.reply_text(
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount} USD —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!\n"
                        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[6] + amount} USD",
                        reply_markup=main_keyboard() if not user[7] else admin_keyboard()
                    )
                else:
                    await update.message.reply_text(
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount} USD —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–∞!",
                        reply_markup=main_keyboard()
                    )
            else:
                await update.message.reply_text("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–∞—Ç–µ–∂–∞.")
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.")
        logger.error(f"Payment error: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args and context.args[0].startswith('IVwpcz1iEoxg_'):
        await handle_payment(update, context)
        return ConversationHandler.END
    
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if user:
        if user_id == CREATOR_ID or user[7]:
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, {user[3]}! üëë",
                reply_markup=admin_keyboard()
            )
        else:
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, {user[3]}!",
                reply_markup=main_keyboard()
            )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PPZ! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username:"
        )
        return REGISTER_USERNAME

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def register_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['username'] = update.message.text
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    return REGISTER_PASSWORD

async def register_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['password'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º:")
    return REGISTER_NICKNAME

async def register_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nickname = update.message.text
    if db.get_user_by_nickname(nickname):
        await update.message.reply_text("–≠—Ç–æ—Ç –ø—Å–µ–≤–¥–æ–Ω–∏–º —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return REGISTER_NICKNAME
    
    context.user_data['nickname'] = nickname
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—å–∫–∞:")
    return REGISTER_WALLET

async def register_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    wallet = update.message.text
    user_id = update.effective_user.id
    username = context.user_data['username']
    password = context.user_data['password']
    nickname = context.user_data['nickname']
    
    if db.add_user(user_id, username, password, nickname, wallet):
        await update.message.reply_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=main_keyboard()
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /start"
        )
    
    return ConversationHandler.END

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
async def show_profile(update: Update, user):
    profile_text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üÜî ID: {user[1]}\n"
        f"üë§ –ü—Å–µ–≤–¥–æ–Ω–∏–º: {user[3]}\n"
        f"üîë –ü–∞—Ä–æ–ª—å: {user[2]}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user[6]} USD\n"
        f"üìä –ö—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª–µ–∫: {user[4]}"
    )
    await update.message.reply_text(profile_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    text = update.message.text
    
    if not user:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    if db.is_muted(user_id):
        await update.message.reply_text("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    
    if text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
        await show_profile(update, user)
    elif text == 'üí∞ –ü–µ—Ä–µ–¥–∞—Ç—å USD':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å USD:")
        return TRANSFER_USER
    elif text == '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É':
        await handle_create_room(update, context)
    elif text == 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=payment_amount_keyboard()
        )
        return PAYMENT_CONFIRMATION
    elif text == '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' and (user_id == CREATOR_ID or user[7]):
        await handle_admin_panel(update, context)
    elif text == 'üîô –ù–∞–∑–∞–¥':
        if user_id == CREATOR_ID or user[7]:
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_keyboard())
        else:
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
        return ConversationHandler.END

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
async def handle_create_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if user[6] < 2.0:
        payment_success = await create_payment(
            update, context, user_id, 2.0, 
            "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã", "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã"
        )
        
        if payment_success:
            await update.message.reply_text(
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã 2 USD –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É.",
                reply_markup=main_keyboard()
            )
    else:
        db.update_balance(user_id, -2.0)
        await update.message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –°–ø–∏—Å–∞–Ω–æ 2 USD.", reply_markup=main_keyboard())

# –ü–µ—Ä–µ–¥–∞—á–∞ USD
async def transfer_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nickname = update.message.text
    recipient = db.get_user_by_nickname(nickname)
    
    if not recipient:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return TRANSFER_USER
    
    context.user_data['recipient_id'] = recipient[1]
    await update.message.reply_text(f"–ù–∞–π–¥–µ–Ω–æ: {recipient[3]}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:")
    return TRANSFER_AMOUNT

async def transfer_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        user_id = update.effective_user.id
        recipient_id = context.user_data['recipient_id']
        
        if amount <= 0:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return TRANSFER_AMOUNT
        
        if db.transfer_balance(user_id, recipient_id, amount):
            await update.message.reply_text(f"–ü–µ—Ä–µ–¥–∞—á–∞ {amount} USD —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", reply_markup=main_keyboard())
        else:
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.", reply_markup=main_keyboard())
        
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
        return TRANSFER_AMOUNT

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
async def handle_payment_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.message.text == 'üîô –ù–∞–∑–∞–¥':
            user_id = update.effective_user.id
            user = db.get_user(user_id)
            if user_id == CREATOR_ID or user[7]:
                await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_keyboard())
            else:
                await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
            return ConversationHandler.END
        
        amount = float(update.message.text.split()[0])
        user_id = update.effective_user.id
        
        payment_success = await create_payment(
            update, context, user_id, amount, 
            "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} USD"
        )
        
        if payment_success:
            await update.message.reply_text(
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã {amount} USD –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.",
                reply_markup=main_keyboard()
            )
        
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
        return PAYMENT_CONFIRMATION

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async def handle_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = db.get_all_users()
    users_text = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user in users:
        users_text += f"ID: {user[1]}, Nick: {user[3]}, Balance: {user[6]}, Admin: {user[7]}, Banned: {user[8]}\n"
    
    if len(users_text) > 4096:
        for x in range(0, len(users_text), 4096):
            await update.message.reply_text(users_text[x:x+4096])
    else:
        await update.message.reply_text(users_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning('Update "%s" caused error "%s"', update, context.error)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –°–æ–∑–¥–∞–µ–º Application (–í–ê–ñ–ù–û: –ù–ï Updater!)
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REGISTER_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_username)],
            REGISTER_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_password)],
            REGISTER_NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_nickname)],
            REGISTER_WALLET: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_wallet)],
            TRANSFER_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, transfer_user)],
            TRANSFER_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, transfer_amount)],
            PAYMENT_CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_payment_amount)],
        },
        fallbacks=[CommandHandler('start', start)],
    )
    
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π polling)
    application.run_polling()

if __name__ == '__main__':
    main()
