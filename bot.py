import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, 
    CallbackContext, ConversationHandler
)
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7914229102:AAGVfk6qafoooQM28fS-SY0mWlXlSRwL_Do')
CREATOR_ID = 8097784914

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
REGISTER_USERNAME, REGISTER_PASSWORD, REGISTER_NICKNAME, REGISTER_WALLET = range(4)
ROOM_SELECTION, ROOM_CHAT, CREATE_ROOM_NAME, CREATE_ROOM_TYPE, CREATE_ROOM_PERSISTENCE, CREATE_ROOM_PASSWORD = range(4, 10)
TRANSFER_USER, TRANSFER_AMOUNT = range(10, 12)
ADMIN_ACTION, BAN_USER, MUTE_USER, MUTE_DURATION, MAKE_ADMIN = range(12, 17)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return ReplyKeyboardMarkup([
        ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üí¨ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç'],
        ['üí∞ –ü–µ—Ä–µ–¥–∞—Ç—å USD', '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É']
    ], resize_keyboard=True)

def admin_keyboard():
    return ReplyKeyboardMarkup([
        ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üí¨ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç'],
        ['üí∞ –ü–µ—Ä–µ–¥–∞—Ç—å USD', '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É'],
        ['‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å']
    ], resize_keyboard=True)

def rooms_keyboard():
    rooms = db.get_rooms()
    keyboard = []
    for room in rooms:
        keyboard.append([f"üö™ {room[1]}"])
    keyboard.append(['üîô –ù–∞–∑–∞–¥'])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def admin_panel_keyboard():
    return ReplyKeyboardMarkup([
        ['üî® –ë–∞–Ω', 'üîá –ú—É—Ç'],
        ['üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞'],
        ['üîô –ù–∞–∑–∞–¥']
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        if user_id == CREATOR_ID or user[7]:  # is_admin
            update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, {user[3]}! üëë",
                reply_markup=admin_keyboard()
            )
        else:
            update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, {user[3]}!",
                reply_markup=main_keyboard()
            )
        return ConversationHandler.END
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PPZ! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username:"
        )
        return REGISTER_USERNAME

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def register_username(update: Update, context: CallbackContext):
    context.user_data['username'] = update.message.text
    update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    return REGISTER_PASSWORD

def register_password(update: Update, context: CallbackContext):
    context.user_data['password'] = update.message.text
    update.message.reply_text("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º:")
    return REGISTER_NICKNAME

def register_nickname(update: Update, context: CallbackContext):
    nickname = update.message.text
    if db.get_user_by_nickname(nickname):
        update.message.reply_text("–≠—Ç–æ—Ç –ø—Å–µ–≤–¥–æ–Ω–∏–º —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return REGISTER_NICKNAME
    
    context.user_data['nickname'] = nickname
    update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—å–∫–∞:")
    return REGISTER_WALLET

def register_wallet(update: Update, context: CallbackContext):
    wallet = update.message.text
    user_id = update.effective_user.id
    username = context.user_data['username']
    password = context.user_data['password']
    nickname = context.user_data['nickname']
    
    if db.add_user(user_id, username, password, nickname, wallet):
        update.message.reply_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=main_keyboard()
        )
    else:
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /start"
        )
    
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    text = update.message.text
    
    if not user:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    if db.is_muted(user_id):
        update.message.reply_text("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    
    if text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
        show_profile(update, user)
    elif text == 'üí¨ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç':
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É:", reply_markup=rooms_keyboard())
    elif text == 'üí∞ –ü–µ—Ä–µ–¥–∞—Ç—å USD':
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å USD:")
        return TRANSFER_USER
    elif text == '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É':
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã:")
        return CREATE_ROOM_NAME
    elif text == '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' and (user_id == CREATOR_ID or user[7]):
        update.message.reply_text("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel_keyboard())
        return ADMIN_ACTION
    elif text.startswith('üö™ '):
        room_name = text[2:]
        join_room(update, context, room_name)
    elif text == 'üîô –ù–∞–∑–∞–¥':
        if user_id == CREATOR_ID or user[7]:
            update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_keyboard())
        else:
            update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
        return ConversationHandler.END

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
def show_profile(update: Update, user):
    profile_text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üÜî ID: {user[1]}\n"
        f"üë§ –ü—Å–µ–≤–¥–æ–Ω–∏–º: {user[3]}\n"
        f"üîë –ü–∞—Ä–æ–ª—å: {user[2]}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user[6]} USD\n"
        f"üìä –ö—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª–µ–∫: {user[4]}"
    )
    update.message.reply_text(profile_text)

# –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç
def join_room(update: Update, context: CallbackContext, room_name):
    user_id = update.effective_user.id
    rooms = db.get_rooms()
    
    for room in rooms:
        if room[1] == room_name:
            if room[4]:  # is_private
                update.message.reply_text("–≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
                context.user_data['room_id'] = room[0]
                return CREATE_ROOM_PASSWORD
            else:
                context.user_data['room_id'] = room[0]
                update.message.reply_text(
                    f"–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É '{room_name}'. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç.",
                    reply_markup=ReplyKeyboardMarkup([['üîô –í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã']], resize_keyboard=True)
                )
                return ROOM_CHAT
    
    update.message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–º–Ω–∞—Ç–µ
def handle_room_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    room_id = context.user_data.get('room_id')
    
    if not room_id:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É.")
        return ConversationHandler.END
    
    if update.message.text == 'üîô –í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã':
        if user_id == CREATOR_ID or user[7]:
            update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.", reply_markup=admin_keyboard())
        else:
            update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.", reply_markup=main_keyboard())
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ
    db.add_message(room_id, user_id, update.message.text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–¥–ø–∏—Å–æ–∫)
    room = db.get_room(room_id)
    update.message.reply_text(f"[{user[3]}]: {update.message.text}")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
def create_room_name(update: Update, context: CallbackContext):
    room_name = update.message.text
    context.user_data['room_name'] = room_name
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã:",
        reply_markup=ReplyKeyboardMarkup([['üîì –ü—É–±–ª–∏—á–Ω–∞—è', 'üîí –ü—Ä–∏–≤–∞—Ç–Ω–∞—è']], resize_keyboard=True)
    )
    return CREATE_ROOM_TYPE

def create_room_type(update: Update, context: CallbackContext):
    room_type = update.message.text
    is_private = 1 if room_type == 'üîí –ü—Ä–∏–≤–∞—Ç–Ω–∞—è' else 0
    context.user_data['is_private'] = is_private
    
    update.message.reply_text(
        "–°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–ø–∞–¥–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è?",
        reply_markup=ReplyKeyboardMarkup([['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']], resize_keyboard=True)
    )
    return CREATE_ROOM_PERSISTENCE

def create_room_persistence(update: Update, context: CallbackContext):
    is_ephemeral = 1 if update.message.text == '‚úÖ –î–∞' else 0
    context.user_data['is_ephemeral'] = is_ephemeral
    
    if context.user_data['is_private']:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:")
        return CREATE_ROOM_PASSWORD
    else:
        return finish_room_creation(update, context)

def create_room_password(update: Update, context: CallbackContext):
    context.user_data['password'] = update.message.text
    return finish_room_creation(update, context)

def finish_room_creation(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    room_name = context.user_data['room_name']
    is_private = context.user_data['is_private']
    is_ephemeral = context.user_data['is_ephemeral']
    password = context.user_data.get('password', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    if user[6] < 2.0:
        update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã. –ù—É–∂–Ω–æ 2 USD.")
        return ConversationHandler.END
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    db.update_balance(user_id, -2.0)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
    if db.create_room(room_name, user_id, is_ephemeral, is_private, password):
        update.message.reply_text(f"–ö–æ–º–Ω–∞—Ç–∞ '{room_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=main_keyboard())
    else:
        update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    return ConversationHandler.END

# –ü–µ—Ä–µ–¥–∞—á–∞ USD
def transfer_user(update: Update, context: CallbackContext):
    nickname = update.message.text
    recipient = db.get_user_by_nickname(nickname)
    
    if not recipient:
        update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return TRANSFER_USER
    
    context.user_data['recipient_id'] = recipient[1]
    update.message.reply_text(f"–ù–∞–π–¥–µ–Ω–æ: {recipient[3]}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:")
    return TRANSFER_AMOUNT

def transfer_amount(update: Update, context: CallbackContext):
    try:
        amount = float(update.message.text)
        user_id = update.effective_user.id
        recipient_id = context.user_data['recipient_id']
        
        if amount <= 0:
            update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return TRANSFER_AMOUNT
        
        if db.transfer_balance(user_id, recipient_id, amount):
            update.message.reply_text(f"–ü–µ—Ä–µ–¥–∞—á–∞ {amount} USD —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", reply_markup=main_keyboard())
        else:
            update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.", reply_markup=main_keyboard())
        
        return ConversationHandler.END
    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
        return TRANSFER_AMOUNT

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
def admin_action(update: Update, context: CallbackContext):
    text = update.message.text
    user_id = update.effective_user.id
    
    if text == 'üî® –ë–∞–Ω':
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
        return BAN_USER
    elif text == 'üîá –ú—É—Ç':
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º—É—Ç–∞:")
        return MUTE_USER
    elif text == 'üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        users = db.get_all_users()
        users_text = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for user in users:
            users_text += f"ID: {user[1]}, Nick: {user[3]}, Balance: {user[6]}, Admin: {user[7]}, Banned: {user[8]}\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(users_text) > 4096:
            for x in range(0, len(users_text), 4096):
                update.message.reply_text(users_text[x:x+4096])
        else:
            update.message.reply_text(users_text)
        
        return ADMIN_ACTION
    elif text == 'üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞':
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º:")
        return MAKE_ADMIN
    elif text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_keyboard())
        return ConversationHandler.END

def ban_user(update: Update, context: CallbackContext):
    try:
        user_id_to_ban = int(update.message.text)
        db.ban_user(user_id_to_ban)
        update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_ban} –∑–∞–±–∞–Ω–µ–Ω.", reply_markup=admin_panel_keyboard())
        return ADMIN_ACTION
    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        return BAN_USER

def mute_user(update: Update, context: CallbackContext):
    try:
        user_id_to_mute = int(update.message.text)
        context.user_data['mute_user_id'] = user_id_to_mute
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö:")
        return MUTE_DURATION
    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        return MUTE_USER

def mute_duration(update: Update, context: CallbackContext):
    try:
        duration = int(update.message.text)
        user_id_to_mute = context.user_data['mute_user_id']
        db.mute_user(user_id_to_mute, duration)
        update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_mute} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç.", reply_markup=admin_panel_keyboard())
        return ADMIN_ACTION
    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç:")
        return MUTE_DURATION

def make_admin(update: Update, context: CallbackContext):
    try:
        user_id_to_admin = int(update.message.text)
        db.make_admin(user_id_to_admin)
        update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_admin} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=admin_panel_keyboard())
        return ADMIN_ACTION
    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        return MAKE_ADMIN

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
def error(update: Update, context: CallbackContext):
    logger.warning('Update "%s" caused error "%s"', update, context.error)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    updater = Updater(BOT_TOKEN, use_context=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REGISTER_USERNAME: [MessageHandler(Filters.text & ~Filters.command, register_username)],
            REGISTER_PASSWORD: [MessageHandler(Filters.text & ~Filters.command, register_password)],
            REGISTER_NICKNAME: [MessageHandler(Filters.text & ~Filters.command, register_nickname)],
            REGISTER_WALLET: [MessageHandler(Filters.text & ~Filters.command, register_wallet)],
            TRANSFER_USER: [MessageHandler(Filters.text & ~Filters.command, transfer_user)],
            TRANSFER_AMOUNT: [MessageHandler(Filters.text & ~Filters.command, transfer_amount)],
            CREATE_ROOM_NAME: [MessageHandler(Filters.text & ~Filters.command, create_room_name)],
            CREATE_ROOM_TYPE: [MessageHandler(Filters.text & ~Filters.command, create_room_type)],
            CREATE_ROOM_PERSISTENCE: [MessageHandler(Filters.text & ~Filters.command, create_room_persistence)],
            CREATE_ROOM_PASSWORD: [MessageHandler(Filters.text & ~Filters.command, create_room_password)],
            ROOM_CHAT: [MessageHandler(Filters.text & ~Filters.command, handle_room_message)],
            ADMIN_ACTION: [MessageHandler(Filters.text & ~Filters.command, admin_action)],
            BAN_USER: [MessageHandler(Filters.text & ~Filters.command, ban_user)],
            MUTE_USER: [MessageHandler(Filters.text & ~Filters.command, mute_user)],
            MUTE_DURATION: [MessageHandler(Filters.text & ~Filters.command, mute_duration)],
            MAKE_ADMIN: [MessageHandler(Filters.text & ~Filters.command, make_admin)],
        },
        fallbacks=[CommandHandler('start', start)],
    )
    
    dp.add_handler(conv_handler)
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_error_handler(error)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    port = int(os.environ.get('PORT', 5000))
    updater.start_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=BOT_TOKEN,
        webhook_url=f"https://ppz-bot.onrender.com/{BOT_TOKEN}"
    )
    updater.idle()

if __name__ == '__main__':
    main()
